# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Selector
                                 A QGIS plugin
 Generador de manzanas catastrales
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-02-27
        git sha              : $Format:%H$
        copyright            : (C) 2021 by UD
        email                : UD
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import *
from qgis.core import QgsProject, QgsVectorFileWriter
from PyQt5.QtWidgets import QApplication, QMainWindow, QDialog
from qgis.utils import iface
from PyQt5.QtGui import *
import sys
from osgeo import ogr
import os
from qgis.utils import *
from qgis.gui import QgsRubberBand
from qgis.analysis import *
import qgis
import processing
from qgis.PyQt import QtGui
from qgis.PyQt import *
from PyQt5.QtCore import QPointF


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .Gen_Manzanas_dialog import SelectorDialog
import os.path


class Selector:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Selector_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Generador manzanas catastrales')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
    
        #Coloca transparente las capas
        

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Selector', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Gen_Manzanas/mapa4.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Generador de Manzanas Catastrales'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Generador de Manzanas Catastrales'),
                action)
            self.iface.removeToolBarIcon(action)

       
    def adicionar(self):

        Seleccion_Sector=self.dlg.comboBox_7.currentText()#takes the text from combobox 7
        Seleccion_Manzana=self.dlg.comboBox_8.currentText()#takes the text from combobox 8
        concat= str(Seleccion_Sector)+str(Seleccion_Manzana)#concatenates the two previous variables
        self.dlg.listWidget.addItem(concat)#adds the concatenated code to the list widget
        self.dlg.comboBox_7.setCurrentIndex(-1)#initializes the empty combobox 7
        self.dlg.comboBox_8.setCurrentIndex(-1)#initializes the empty combobox 8
  

    def eliminar(self):
        item = self.dlg.listWidget.takeItem(self.dlg.listWidget.currentRow())#takes the selected the item
        item = None
        self.dlg.pushButton_2.setEnabled(False)#initializes disabled the button 2

               
    def cancelar(self):
        self.dlg.pushButton.setEnabled(False)#initializes disabled the button 2
        self.dlg.pushButton_2.setEnabled(False)#initializes disabled the button 
        self.dlg.comboBox_7.setCurrentIndex(-1)#initializes the empty combobox 7
        self.dlg.comboBox_8.setCurrentIndex(-1)#initializes the empty combobox 8
        self.dlg.listWidget.clear()#clears the list widget
        self.dlg.close()#closes the window

    def activarAdicionar(self):
        if (self.dlg.comboBox_8.currentText()!=""):#if the current text of combobox 8 is differente of empty
            self.dlg.pushButton.setEnabled(True)#enables the button
        else:
            self.dlg.pushButton.setEnabled(False)#else, disables the button


    def activarEliminar(self):
        self.dlg.pushButton_2.setEnabled(True)#activates the button 2
       
    def cambioLayerManzana(self):
        self.dlg.comboBox_7.clear()#clears the combobox 7
        self.dlg.comboBox_8.clear()#clears the combobox 8
        sectores=self.dlg.comboBox.currentText()#takes the current text from combobox 
        manzanas=self.dlg.comboBox_2.currentText()#takes the current text from combobox 2
        
        #takes the features list from "SecCodigo" field
        for layer in QgsProject.instance().mapLayers().values():        
            if layer.name()== manzanas:
                list_SCat=list([f["SecCodigo"] for f in layer.getFeatures()])
                self.dlg.comboBox_7.addItems(sorted(set(list_SCat)))#put on the list of sector code
                self.dlg.comboBox_7.setCurrentIndex(-1)


    def activarManzanas(self):
        if (self.dlg.comboBox_7.currentText()!=""):#if current text from combobox 7 is different of void
            self.dlg.comboBox_8.setEnabled(True)#if current text from combobox 8 is different of void

            self.dlg.comboBox_8.clear()#clears the combobox 8
            manzanas=self.dlg.comboBox_2.currentText()#takes the current text from combobox 2
            sectorActual=self.dlg.comboBox_7.currentText()#takes the current text from combobox 7

            
            for layer in QgsProject.instance().mapLayers().values():                  
                if layer.name()== manzanas:
                    list_man=list([f["ManCodigo"] for f in layer.getFeatures()])

            #splits and takes the code of cadastral block
            list_mancod_red=[]     
            for word in list_man:
                if word[:6] == sectorActual:
                    new_word=word[6:]
                    list_mancod_red.append(new_word)
            self.dlg.comboBox_8.addItems(sorted(set(list_mancod_red)))
            self.dlg.comboBox_8.setCurrentIndex(-1)
          
        else:
            self.dlg.comboBox_8.setEnabled(False)
            

    def aceptar(self):

        #Listado de las manzanas adicionadas
        itemsTextList =  [str(self.dlg.listWidget.item(i).text()) for i in range(self.dlg.listWidget.count())]
        itemsTextList = sorted(set(itemsTextList))

        

        class seleccion:
            def __init__(self, valor):
                #cambia el color de la selección
                iface.mapCanvas().setSelectionColor(QColor("Transparent"))
                self.valor=valor
                
            def simbologia(self):
                for layer in QgsProject.instance().mapLayers().values():
                    if layer.name()== self.dlg.comboBox_2.currentText():#Simbologia Manzana
                        simbolo=layer.renderer().symbol().symbolLayer(0)#simbolo
                        simbolo.setColor(QColor("Transparent")) #vuelve transparente el relleno
                        props=layer.renderer().symbol().symbolLayer(0).properties()#propiedades del simbolo
                        props['color_border']='black'#cambia el color de la linea
                        props['width_border']='0.9'#cambia el tamaño del borde
                        props['style']="solid"#estilo rellono
                        props['style_border']="line"#estilo línea
                        layer.renderer().setSymbol(QgsFillSymbol.createSimple(props))#muestra los cambios
                        
                        layer.triggerRepaint()#re dibuja con las caracteristicas configuradas anteriormente
                        iface.layerTreeView().refreshLayerSymbology(layer.id())

                    elif layer.name()==self.dlg.comboBox_4.currentText():#Simbologia Construccion
                        simbolo=layer.renderer().symbol().symbolLayer(0)#simbolo
                        simbolo.setColor(QColor("Transparent")) #vuelve transparente el relleno
                        props=layer.renderer().symbol().symbolLayer(0).properties()#propiedades del simbolo
                        props['color_border']='black'#cambia el color de la linea
                        props['width_border']='0.1'#cambia el tamaño del borde
                        props['style']="solid"#estilo rellono
                        props['style_border']="line"#estilo línea
                        layer.renderer().setSymbol(QgsFillSymbol.createSimple(props))#muestra los cambios
                        fields=list(layer.fields())
                        layer.triggerRepaint()#re dibuja con las caracteristicas configuradas anteriormente
                        iface.layerTreeView().refreshLayerSymbology(layer.id())
                        
                    elif layer.name()==self.dlg.comboBox_3.currentText():#Simbologia Loteo
                        simbolo=layer.renderer().symbol().symbolLayer(0)#simbolo
                        simbolo.setColor(QColor("Transparent")) #vuelve transparente el relleno
                        props=layer.renderer().symbol().symbolLayer(0).properties()#propiedades del simbolo
                        props['color_border']='black'#cambia el color de la linea
                        props['width_border']='0.3'#cambia el tamaño del borde
                        props['style']="solid"#estilo rellono
                        props['style_border']="line"#estilo línea
                        layer.renderer().setSymbol(QgsFillSymbol.createSimple(props))#muestra los cambios
                        
                        layer.triggerRepaint()#re dibuja con las caracteristicas configuradas anteriormente
                        iface.layerTreeView().refreshLayerSymbology(layer.id())

                    elif layer.name()==self.dlg.comboBox.currentText():
                        simbolo=layer.renderer().symbol().symbolLayer(0)#simbolo
                        simbolo.setColor(QColor("Transparent")) #vuelve transparente el relleno
                        props=layer.renderer().symbol().symbolLayer(0).properties()#propiedades del simbolo
                        props['color_border']='gray'#cambia el color de la linea
                        props['width_border']='1'#cambia el tamaño del borde
                        props['style']="solid"#estilo rellono
                        props['style_border']="line"#estilo línea
                        layer.renderer().setSymbol(QgsFillSymbol.createSimple(props))#muestra los cambios
                        layer.triggerRepaint()#re dibuja con las caracteristicas configuradas anteriormente
                        iface.layerTreeView().refreshLayerSymbology(layer.id())

                    elif layer.name()==self.dlg.comboBox_5.currentText():
                        simbolo=layer.renderer().symbol().symbolLayer(0)
                        simbolo.setColor(QColor("Transparent"))#cambia el color
                        props=layer.renderer().symbol().symbolLayer(0).properties()#propiedades del simbolo
                        props['color_border']='"Transparent"'#cambia el color de la linea
                        layer.renderer().setSymbol(QgsFillSymbol.createSimple(props))#muestra los cambios
                        #simbolo.setWidth(1) #cambia el tamaño
                        layer.triggerRepaint()#re dibuja con las caracteristicas configuradas anteriormente
                        iface.layerTreeView().refreshLayerSymbology(layer.id())

                    elif layer.name()=="ManzanaSelect":
                        symbol_lyr_default = QgsSimpleFillSymbolLayer()
                        symbol_lyr_default.setFillColor(QColor("blue"))
                        symbol_default = QgsFillSymbol()
                        symbol_default.appendSymbolLayer(symbol_lyr_default)

                        # Define a line pattern symbol (hashed line /)
                        symbol_lyr_line = QgsLinePatternFillSymbolLayer()
                        symbol_lyr_line.setLineAngle(45)
                        symbol_lyr_line.setDistance(2)
                        symbol_lyr_line.setLineWidth(0.1)
                        symbol_lyr_line.setColor(QColor("Black"))
                        symbol_line = QgsFillSymbol()
                        symbol_line.deleteSymbolLayer(0)
                        symbol_line.appendSymbolLayer(symbol_lyr_line)
                        
                        root_rule = QgsRuleBasedRenderer.Rule(symbol_line)
                        
                        rule_renderer = QgsRuleBasedRenderer(root_rule)
                        layer.setRenderer(rule_renderer)
                        layer.triggerRepaint()

            def seleccionarExpresion(self):
                
                for layer in QgsProject.instance().mapLayers().values():
                    if layer.name()==self.dlg.comboBox_2.currentText():
                        expr="\"ManCodigo\"="+str(v)
                        layer.selectByExpression(expr,QgsVectorLayer.SetSelection)
                        Manz_Select = layer.materialize(QgsFeatureRequest().setFilterFids(layer.selectedFeatureIds()))#create memory layer
                        QgsProject.instance().addMapLayer(Manz_Select)#adds memory layer
                        
                        for layer in iface.layerTreeView().selectedLayers():
                            if layer == Manz_Select:
                                layer.setName('ManzanaSelect') #sets name to memory layer

                for layer in QgsProject.instance().mapLayers().values():
                    if layer.name()==self.dlg.comboBox_3.currentText():
                        expr2="\"ManzCodigo\"="+str(v)
                        layer.selectByExpression(expr2,QgsVectorLayer.SetSelection)
                        Loteo_Select = layer.materialize(QgsFeatureRequest().setFilterFids(layer.selectedFeatureIds()))
                        QgsProject.instance().addMapLayer(Loteo_Select)
                        simbolo=Loteo_Select.renderer().symbol().symbolLayer(0)#simbolo
                        simbolo.setColor(QColor("transparent")) #vuelve transparente el relleno
                        props=Loteo_Select.renderer().symbol().symbolLayer(0).properties()#propiedades del simbolo
                        props['color_border']='black'#cambia el color de la linea
                        props['width_border']='0.3'#cambia el tamaño del borde
                        props['style']="solid"#estilo rellono
                        props['style_border']="line"#estilo línea
                        Loteo_Select.renderer().setSymbol(QgsFillSymbol.createSimple(props))#muestra los cambios      
                        Loteo_Select.triggerRepaint()#re dibuja con las caracteristicas configuradas anteriormente
                        iface.layerTreeView().refreshLayerSymbology(Loteo_Select.id())
                        
                        for layer in iface.layerTreeView().selectedLayers():
                            if layer == Loteo_Select:
                                layer.setName('LoteoSelect')

                        #create labeling for layer
                        for layer in QgsProject.instance().mapLayers().values():
                            if layer.name()=="LoteoSelect":                        
                                text_format_lot=QgsTextFormat()
                                text_format_lot.setFont(QFont("Arial", 6))
                                text_format_lot.setSize(6)
                                
                                buffer_settings_lot=QgsTextBufferSettings()#configura el bordeado de la letra
                                buffer_settings_lot.setEnabled(True)
                                buffer_settings_lot.setSize(0.1)
                                buffer_settings_lot.setColor(QColor("black"))
                                
                                text_format_lot.setBuffer(buffer_settings_lot)
                                
                                layer_settings_lot=QgsPalLayerSettings()
                                layer_settings_lot.setFormat(text_format_lot)
                                
                                layer_settings_lot.isExpression=True
                                layer_settings_lot.fieldName="right(\"LotCodigo\",3)"
                                layer_settings_lot.placement=3
                                layer_settings_lot.enabled=True
                                layer_settings_lot=QgsVectorLayerSimpleLabeling(layer_settings_lot)
                                
                                layer.setLabelsEnabled(True)
                                layer.setLabeling(layer_settings_lot)
                                layer.triggerRepaint()
                                iface.mapCanvas().refresh()


                for layer in QgsProject.instance().mapLayers().values():                  
                    if layer.name()== self.dlg.comboBox_5.currentText():
                        layer_select = QgsProject.instance().mapLayersByName("ManzanaSelect")[0]#layer used to do the select by location
                        layer_to_select =  QgsProject.instance().mapLayersByName(self.dlg.comboBox_5.currentText())[0]#layer with select by location
                        #setting of parameters
                        params = {'INPUT':layer_to_select,
                                'PREDICATE':0,
                                'INTERSECT':layer_select, # USE HERE THE SELECTED FEATURES
                                'METHOD':0}
                                
                        result = processing.run("qgis:selectbylocation", params)#select by location
                        Dom_Select = layer.materialize(QgsFeatureRequest().setFilterFids(layer.selectedFeatureIds()))#create a layer with selection
                        QgsProject.instance().addMapLayer(Dom_Select)
                        simbolo2=Dom_Select.renderer().symbol().symbolLayer(0)#simbolo
                        simbolo2.setColor(QColor("transparent")) #vuelve transparente el relleno
                        propspd=Dom_Select.renderer().symbol().symbolLayer(0).properties()#propiedades del simbolo
                        propspd['color_border']='Transparent' #cambia el tamaño
                        Dom_Select.renderer().setSymbol(QgsFillSymbol.createSimple(propspd))#muestra los cambios
                                
                        Dom_Select.triggerRepaint()#re dibuja con las caracteristicas configuradas anteriormente
                        iface.layerTreeView().refreshLayerSymbology(Dom_Select.id())

                        for layer in iface.layerTreeView().selectedLayers():
                            if layer == Dom_Select:
                                layer.setName('Domiciliaria')

                        for layer in QgsProject.instance().mapLayers().values():
                            if layer.name()=="Domiciliaria":
                        
                                text_format_dom=QgsTextFormat()
                                text_format_dom.setFont(QFont("Arial", 4))
                                text_format_dom.setSize(4)
                                
                                buffer_settings_dom=QgsTextBufferSettings()#configura el bordeado de la letra
                                buffer_settings_dom.setEnabled(True)
                                buffer_settings_dom.setSize(0.1)
                                buffer_settings_dom.setColor(QColor("black"))
                                
                                text_format_dom.setBuffer(buffer_settings_dom)
                                
                                layer_settings_dom=QgsPalLayerSettings()
                                layer_settings_dom.setFormat(text_format_dom)
                                
                                layer_settings_dom.isExpression=True
                                layer_settings_dom.fieldName="PDoTexto"
                                layer_settings_dom.placement=3
                                layer_settings_dom.enabled=True
                                layer_settings_dom=QgsVectorLayerSimpleLabeling(layer_settings_dom)
                                
                                layer.setLabelsEnabled(True)
                                layer.setLabeling(layer_settings_dom)
                                layer.triggerRepaint()
                                iface.mapCanvas().refresh() 


                for layer in QgsProject.instance().mapLayers().values():                  
                    if layer.name()== self.dlg.comboBox_4.currentText():
                        layer_select = QgsProject.instance().mapLayersByName("ManzanaSelect")[0]
                        layer_to_select =  QgsProject.instance().mapLayersByName(self.dlg.comboBox_4.currentText())[0]

                        params = {'INPUT':layer_to_select,
                                'PREDICATE':0,
                                'INTERSECT':layer_select, # USE HERE THE SELECTED FEATURES
                                'METHOD':0}
                                
                        result = processing.run("qgis:selectbylocation", params)                        

                        Cons_Select = layer.materialize(QgsFeatureRequest().setFilterFids(layer.selectedFeatureIds()))
                        QgsProject.instance().addMapLayer(Cons_Select)
                        simbolo3=Cons_Select.renderer().symbol().symbolLayer(0)#simbolo
                        simbolo3.setColor(QColor("transparent")) #vuelve transparente el relleno
                        propscon=Cons_Select.renderer().symbol().symbolLayer(0).properties()#propiedades del simbolo
                        propscon['color_border']='black'#cambia el color de la linea
                        propscon['width_border']='0.1'#cambia el tamaño del borde
                        propscon['style']="solid"#estilo rellono
                        propscon['style_border']="line"#estilo línea
                        Cons_Select.renderer().setSymbol(QgsFillSymbol.createSimple(propscon))#muestra los cambios
                                
                        Cons_Select.triggerRepaint()#re dibuja con las caracteristicas configuradas anteriormente
                        iface.layerTreeView().refreshLayerSymbology(Cons_Select.id())
                       
                        for layer in iface.layerTreeView().selectedLayers():
                            if layer == Cons_Select:
                                layer.setName('ConstruccionM')       

                        for layer in QgsProject.instance().mapLayers().values():
                            if layer.name()=="ConstruccionM":
                        
                                text_format_con=QgsTextFormat()
                                text_format_con.setFont(QFont("Arial", 4))
                                text_format_con.setSize(4)
                                
                                buffer_settings_con=QgsTextBufferSettings()#configura el bordeado de la letra
                                buffer_settings_con.setEnabled(True)
                                buffer_settings_con.setSize(0.1)
                                buffer_settings_con.setColor(QColor("black"))
                                
                                text_format_con.setBuffer(buffer_settings_con)
                                
                                layer_settings_con=QgsPalLayerSettings()
                                layer_settings_con.setFormat(text_format_con)
                                
                                layer_settings_con.isExpression=True
                                layer_settings_con.fieldName="ConNPisos"
                                layer_settings_con.placement=3
                                layer_settings_con.enabled=True
                                layer_settings_con=QgsVectorLayerSimpleLabeling(layer_settings_con)
                                
                                layer.setLabelsEnabled(True)
                                layer.setLabeling(layer_settings_con)
                                layer.triggerRepaint()
                                iface.mapCanvas().refresh()

            def ZoomToSelection(self):

                canvas=qgis.utils.iface.mapCanvas()

                for layer in QgsProject.instance().mapLayers().values():
                    if layer.name()==self.dlg.comboBox_2.currentText():
                        canvas.zoomToSelected(layer)
                        canvas.refresh()

            def labels(self):
                for layer in QgsProject.instance().mapLayers().values():
                    if layer.name()==self.dlg.comboBox_2.currentText():
                        text_format=QgsTextFormat()
                        text_format.setFont(QFont("Arial", 10))
                        text_format.setSize(10)
                        
                        buffer_settings=QgsTextBufferSettings()#configura el bordeado de la letra
                        buffer_settings.setEnabled(True)
                        buffer_settings.setSize(0.1)
                        buffer_settings.setColor(QColor("black"))
                        
                        text_format.setBuffer(buffer_settings)
                        
                        layer_settings=QgsPalLayerSettings()
                        layer_settings.setFormat(text_format)
                        
                        layer_settings.isExpression=True
                        layer_settings.fieldName="right(\"ManCodigo\",3)"
                        layer_settings.placement=4
                        layer_settings.enabled=True
                        layer_settings=QgsVectorLayerSimpleLabeling(layer_settings)
                        
                        layer.setLabelsEnabled(True)
                        layer.setLabeling(layer_settings)
                        layer.triggerRepaint()
                        iface.mapCanvas().refresh()

                    if layer.name()==self.dlg.comboBox_6.currentText():
                        text_format_via=QgsTextFormat()
                        text_format_via.setFont(QFont("Arial", 6))
                        text_format_via.setSize(6)
                        
                        buffer_settings_via=QgsTextBufferSettings()#configura el bordeado de la letra
                        buffer_settings_via.setEnabled(True)
                        buffer_settings_via.setSize(0.3)
                        buffer_settings_via.setColor(QColor("Yellow"))
                        
                        text_format_via.setBuffer(buffer_settings_via)
                        
                        layer_settings_via=QgsPalLayerSettings()
                        layer_settings_via.setFormat(text_format_via)
                        
                        #layer_settings.isExpression=True
                        layer_settings_via.fieldName="MVIEtiquet"
                        layer_settings_via.placement=2
                        layer_settings_via.enabled=True
                        layer_settings_via=QgsVectorLayerSimpleLabeling(layer_settings_via)
                        
                        layer.setLabelsEnabled(True)
                        layer.setLabeling(layer_settings_via)
                        layer.triggerRepaint()
                        iface.mapCanvas().refresh()
                        simbolo=layer.renderer().symbol().symbolLayer(0)#simbolo
                        simbolo.setColor(QColor("Transparent")) #vuelve transparente el relleno
                        layer.triggerRepaint()#re dibuja con las caracteristicas configuradas anteriormente
                        iface.layerTreeView().refreshLayerSymbology(layer.id())

            def apagarCapa(self):
                for layer in QgsProject.instance().mapLayers().values():
                    if layer.name()==self.dlg.comboBox_3.currentText():
                        layer_state=QgsProject.instance().layerTreeRoot().findLayer(layer.id()).itemVisibilityChecked()
                        if layer_state==True:
                            QgsProject.instance().layerTreeRoot().findLayer(layer.id()).setItemVisibilityChecked(False)

                for layer in QgsProject.instance().mapLayers().values():
                    if layer.name()==self.dlg.comboBox_4.currentText():
                        layer_state=QgsProject.instance().layerTreeRoot().findLayer(layer.id()).itemVisibilityChecked()
                        if layer_state==True:
                            QgsProject.instance().layerTreeRoot().findLayer(layer.id()).setItemVisibilityChecked(False)

            def eliminarCapa(self):
                to_be_deleted = QgsProject.instance().mapLayersByName('ManzanaSelect')[0]
                QgsProject.instance().removeMapLayer(to_be_deleted.id())
                to_be_deleted2 = QgsProject.instance().mapLayersByName('ConstruccionM')[0]
                QgsProject.instance().removeMapLayer(to_be_deleted2.id())
                to_be_deleted3 = QgsProject.instance().mapLayersByName('Domiciliaria')[0]
                QgsProject.instance().removeMapLayer(to_be_deleted3.id())
                to_be_deleted4 = QgsProject.instance().mapLayersByName('LoteoSelect')[0]
                QgsProject.instance().removeMapLayer(to_be_deleted4.id())                

            def borarSeleccion(self):
                for layer in QgsProject.instance().mapLayers().values():
                    layer.removeSelection()                

            def Layout(self):
                project = QgsProject.instance()
                #get a reference to the layout manager
                manager = project.layoutManager()
                #make a new print layout object
                layout = QgsPrintLayout(project)
                layoutName = str(v)
                layouts_list = manager.printLayouts()
                for layout in layouts_list:
                    if layout.name() == layoutName:
                        manager.removeLayout(layout)
                layout = QgsPrintLayout(project)
                #needs to call this according to API documentaiton
                layout.initializeDefaults()
                layout.setName(layoutName)
                layout_page = QgsLayoutItemPage(layout)
                layout_page.setPageSize(QgsLayoutSize(11, 17, QgsUnitTypes.LayoutInches))
                layout_page.decodePageOrientation('Landscape')
                #add layout to manager
                manager.addLayout(layout)
                
                #ADD MAP
                #create default map canvas
                canvas = qgis.utils.iface.mapCanvas()
                rect = QgsRectangle(canvas.extent())
                rect.scale(1)
                layout_map = QgsLayoutItemMap.create(layout)
                layout_map.setId("Mapa01")
                #using ndawson's answer below, do this before setting extent
                layout_map.attemptResize(QgsLayoutSize(10,10, QgsUnitTypes.LayoutInches))
                layout_map.attemptMove(QgsLayoutPoint(1, 1, QgsUnitTypes.LayoutInches))
                #set an extent 
                layout_map.setExtent(rect)
                #add the map to the layout
                layout.addLayoutItem(layout_map)
                #Create an object of QgsComposerLabel class
                label = QgsLayoutItemLabel(layout)
                label.setId("Titulo")
                label.setItemRotation(0, True)
                label.setFont(QFont('Tahoma', 15))
                label.setFontColor(QColor('black'))
                label.setText("MANZANA: "+str(v))
                label.adjustSizeToText()
                #label.setFrameEnabled(True)
                label.setBackgroundEnabled(False)
                label.setBackgroundColor(QColor('blue'))
                label.attemptMove(QgsLayoutPoint(5, 0.25, QgsUnitTypes.LayoutInches))
                layout.addItem(label)
                #Create an object of QgsLayoutItemScaleBar
                scalebar = QgsLayoutItemScaleBar(layout)
                scalebar.setStyle('Single Box')
                #scalebar.setStyle('Line Ticks Up')
                scalebar.setUnits(QgsUnitTypes.DistanceMeters)
                scalebar.setNumberOfSegments(3)
                scalebar.setNumberOfSegmentsLeft(1)
                scalebar.setUnitsPerSegment(25)
                scalebar.setUnitLabel('m')
                scalebar.setFont(QFont('Arial', 14))
                scalebar.setLinkedMap(layout_map)
                #scalebar.applyDefaultSize()
                scalebar.update()
                scalebar.attemptMove(QgsLayoutPoint(20, 190, QgsUnitTypes.LayoutMillimeters))
                layout.addItem(scalebar)

                # add some items


                polyline1 = QPolygonF()
                polyline1.append(QPointF(15, 5.0))
                polyline1.append(QPointF(290.0, 5))
                polyline1.append(QPointF(290.0, 205))
                polyline1.append(QPointF(15, 205))
                layoutItemPolyline = QgsLayoutItemPolyline(polyline1, layout)
                layout.addLayoutItem(layoutItemPolyline)
                
                
                image_location = os.path.join(QgsProject.instance().homePath(), "1200px-Escudo_UD.png")
                vlayer = iface.activeLayer()
                logo = QgsLayoutItemPicture(layout)
                logo.setPicturePath(image_location)
                logo.attemptResize(QgsLayoutSize(20, 20,QgsUnitTypes.LayoutMillimeters))
                logo.attemptMove(QgsLayoutPoint(270.150,185.150,QgsUnitTypes.LayoutMillimeters))
                layout.addLayoutItem(logo)
                
                
                #exportando el Layout
                #--------------------
                layout_exporter = QgsLayoutExporter(layout)
                pdf_export_settings = QgsLayoutExporter.PdfExportSettings()
                pdf_export_settings.dpi = 200
                res = layout_exporter.exportToPdf("C:/Users/Public/"+str(v)+".pdf", pdf_export_settings)
                if res != QgsLayoutExporter.Success:
                    raise RuntimeError()
       
        for v in itemsTextList:
            instSelec= seleccion(v)
            seleccion.seleccionarExpresion(self)
            seleccion.simbologia(self)
            seleccion.labels(self)
            seleccion.ZoomToSelection(self)
            seleccion.apagarCapa(self)
            seleccion.borarSeleccion(self)
            seleccion.Layout(self)
            seleccion.eliminarCapa(self)
              
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = SelectorDialog()

            # Accion del boton Adicionar
            self.dlg.pushButton.clicked.connect(self.adicionar)

            # Accion del boton Eliminar
            self.dlg.pushButton_2.clicked.connect(self.eliminar)

            #Accion del boton Aceptar
            self.dlg.pushButton_3.clicked.connect(self.aceptar)
            
            #Accion del boton cancelar
            self.dlg.pushButton_4.clicked.connect(self.cancelar)

            #Accion para activar el boton eliminar
            self.dlg.listWidget.itemPressed.connect(self.activarEliminar)

            #Accion para activar el boton adicionar
            self.dlg.comboBox_8.currentIndexChanged.connect(self.activarAdicionar)
            
            #Accion para activar el menu de manzanas
            self.dlg.comboBox_7.currentIndexChanged.connect(self.activarManzanas)

            #Accion cuando se cambia Layer manzana
            self.dlg.comboBox_2.currentIndexChanged.connect(self.cambioLayerManzana)

            
        self.dlg.comboBox.clear()
        
        for layer in QgsProject.instance().mapLayers().values():
            fields=list(layer.fields())
            for field in fields:
                if field.name()=="SCaCodigo":
                    self.dlg.comboBox.addItems([layer.name()])

                elif field.name()=="ManCodigo":
                    self.dlg.comboBox_2.addItems([layer.name()])
                    
                elif field.name()=="LotCodigo":
                    self.dlg.comboBox_3.addItems([layer.name()])

                elif field.name()=="ConCodigo" and "ConNPisos":
                    self.dlg.comboBox_4.addItems([layer.name()])

                elif field.name()=="PDoCodigo" and "PDoAngulo" and "PDoTexto":
                    self.dlg.comboBox_5.addItems([layer.name()])

                elif field.name()=="MVIEtiquet":
                    self.dlg.comboBox_6.addItems([layer.name()])       
     
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass